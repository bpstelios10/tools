# my global config
global:
  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
# - "first_rules.yml"
# - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: 'prometheus'
    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.
    static_configs:
      - targets: ['localhost:9090']
  - job_name: 'grafana'
    scrape_interval: 5s
    metrics_path: /metrics
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      - source_labels: [ __meta_kubernetes_namespace ]
        action: keep
        regex:  grafana-.*
      # Extract the Kubernetes "deployment" label as a metric label
      - source_labels: [ __meta_kubernetes_pod_label_deployment ]
        regex: (.*)
        target_label: deployment
      # Extract the Kubernetes "namespace" label as a metric label
      - source_labels: [ __meta_kubernetes_namespace ]
        regex: (.*)
        target_label: namespace
      # Extract the Kubernetes pod name as a metric label
      - source_labels: [ __meta_kubernetes_pod_name ]
        regex: (.*)
        target_label: pod
      # Extract the Kubernetes "app" label as a metric label
      - source_labels: [ __meta_kubernetes_pod_label_app ]
        regex: (.*)
        target_label: application
      # Keep 8080 port only for scraping metrics
      - source_labels: [ __meta_kubernetes_pod_container_port_number ]
        separator: ;
        regex:  (3000)
        action: keep
  - job_name: 'webflux_service_metrics'
    scrape_interval: 5s
    metrics_path: /private/metrics
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      - source_labels: [ __meta_kubernetes_namespace ]
        action: keep
        regex:  webflux-.*
      # Extract the Kubernetes "deployment" label as a metric label
      - source_labels: [ __meta_kubernetes_pod_label_deployment ]
        regex: (.*)
        target_label: deployment
      # Extract the Kubernetes "namespace" label as a metric label
      - source_labels: [ __meta_kubernetes_namespace ]
        regex: (.*)
        target_label: namespace
      # Extract the Kubernetes pod name as a metric label
      - source_labels: [ __meta_kubernetes_pod_name ]
        regex: (.*)
        target_label: pod
      # Extract the Kubernetes "app" label as a metric label
      - source_labels: [ __meta_kubernetes_pod_label_app ]
        regex: (.*)
        target_label: application
      # Keep 8080 port only for scraping metrics
      - source_labels: [ __meta_kubernetes_pod_container_port_number ]
        separator: ;
        regex:  (8080)
        action: keep
  - job_name: 'kube_state_metrics'
    static_configs:
      - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']
  - job_name: 'cAdvisor'
#    scheme: https
#    tls_config:
#      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    kubernetes_sd_configs:
      - role: node
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [ __meta_kubernetes_node_name ]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor